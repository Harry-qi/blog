<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年终总结</title>
    <url>/blog/2021/12/12/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>之前从没写过年终总结，感觉就是不敢面对自己，不能一直这样下去了。勇敢面对自己，认清楚自己，接受不完美的自己，才能更好的进步。</p>
</blockquote>
<h1 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h1><p>  2021年做的还不错的算是健身了，这一年加班不多，每次下班回来就开始健身。<br>  从2020年8月份到2021年的10月份，坚持了一年多点，感觉还不错。<br>  主要是举哑铃、深蹲、跑步，肱二头肌还是练出来了，跑步的话每次能跑40分钟</p>
<h2 id="“得”"><a href="#“得”" class="headerlink" title="“得”"></a>“得”</h2><ol>
<li>自己能坚持做一件事情了，很有成就感，让我有自信去坚持做其他的事情了</li>
<li>身体素质确实变好了，感冒变少了</li>
<li>整个人的气质变好了，更加有精神了<h2 id="“失”"><a href="#“失”" class="headerlink" title="“失”"></a>“失”</h2></li>
<li>膝盖受伤。走长时间的路，膝盖就感觉不适，很痛。医生说不能在做膝关节运动了</li>
<li>青春痘暴涨，真是痛苦</li>
</ol>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ol>
<li>做了一些后端工作，点亮了<code>egg</code>、 <code>sequelize</code>的技能点</li>
<li>总结了11篇技术文章</li>
<li>写了自己的<code>CLI</code></li>
<li>入门了<code>ts</code>，了解了微前端以及框架<code>qiankun</code></li>
<li>总结了工作上常用的组件</li>
<li>写了一些小工具、小插件 </li>
</ol>
<p>总的来说2021年在技术上算是“瞎折腾”了</p>
<h2 id="“得”-1"><a href="#“得”-1" class="headerlink" title="“得”"></a>“得”</h2><ol>
<li>广度得以提升</li>
<li>提高了主动性，遇到痛点自己会主动利用技术去解决<h2 id="“失”-1"><a href="#“失”-1" class="headerlink" title="“失”"></a>“失”</h2></li>
<li>没有把新技术运用到自己项目中，例如<code>vue3</code>、基于<code>ES module</code>的一些打包工具</li>
</ol>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>在上家公司做了9个月，也挺感激上家公司的。自己在技术广度上得到了提升，养成了写文档的习惯。 </p>
<p>11月中旬来到了奇点云，<br>现在这家公司，厉害的人还是很多的，值得我好好学习；业务上也更加复杂了，也有大数据量的情况。<br>这家公司基建方面做的还是比较全的，需要学习的还是很多的。<br>后面的日子里就好好加油吧</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>感觉今年花销还是挺大的。虽然工资是比去年提高了，但是没存多少钱。</p>
<ol>
<li>买了1199的头戴耳机</li>
<li>买了799的airPods2</li>
<li>花了6999，做光子嫩肤套餐、499的药膏</li>
<li>其他买完感觉没用的东西</li>
</ol>
<p>感觉是掉进了消费陷阱，不过花钱确实是蛮爽的。<br>“挣钱就蛮幸苦的，为什么花钱还要折磨幸苦”，哈哈，说的确实有点道理。以后还是克制下不必要的消费</p>
<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><p>看完了《深入理解ES6》、散文《每一寸时光都有欢喜》、小说《那个不为人知的故事》。<br>总的来说，看的说太少了，下年要加强了。  </p>
<p>体会：</p>
<ol>
<li>看散文书能够让人心静。保持一颗平静的心态真的很可贵</li>
<li>看技术书来梳理知识，能更加系统完善</li>
<li>看小说确实比较有意思</li>
<li>看书能让自己的话更加通顺易懂</li>
</ol>
<h1 id="2022年重新出发"><a href="#2022年重新出发" class="headerlink" title="2022年重新出发"></a>2022年重新出发</h1><p>立下新的flag，希望在2022年每一步都走在自己的热爱里！</p>
<ol>
<li>重新开始锻炼身体</li>
<li>看完一本专业书、一本散文书</li>
<li>专精技术，横向发展</li>
</ol>
<h2 id="每天具体实施"><a href="#每天具体实施" class="headerlink" title="每天具体实施"></a>每天具体实施</h2><p>下班后，看30分钟的书，<br>总结今天那些没做好，学到了哪些。</p>
<h2 id="周末"><a href="#周末" class="headerlink" title="周末"></a>周末</h2><ol>
<li>看书1小时</li>
<li>写这周学到的技术，总结成文章</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Github actions 和vercel</title>
    <url>/blog/2022/02/10/Github-actions-%E5%92%8Cvercel/</url>
    <content><![CDATA[<p>最近在部署一些node服务，不想麻烦公司同事搞服务器来部署了，于是想自己部署。<br>之前有了解到<code>GitHub actions</code>和<code>vercel</code>，但是只是使用过<code>GitHub actions</code>来部署博客。这次部署node服务遇到了一些问题，特此记录下。</p>
<h1 id="尝试使用GitHub-actions部署node"><a href="#尝试使用GitHub-actions部署node" class="headerlink" title="尝试使用GitHub actions部署node"></a>尝试使用<code>GitHub actions</code>部署node</h1><ol>
<li>发现每次部署会变ip，尝试谷歌如何固定ip，得到<a href="https://stackoverflow.com/questions/66970875/is-it-possible-to-use-static-ip-when-using-github-actions">结果</a>是需要自己搭建服务器</li>
<li>执行<code>npm run start</code>一直在进行中的状态，无法结束这个状态。然后创建仓库进行测试，发现如果有setInterval会一直处于上述状态。自己使用express写个测试接口，也会处于上述状态  </li>
</ol>
<p>最终决定更换node定时发送消息的方案，决定使用<code>GitHub actions</code>的定时服务。<br>还是发现了问题</p>
<ol>
<li><code>GitHub actions</code>的时间是<code>GMT</code>，北京时间比<code>GMT</code>时间快<strong>8个小时</strong><br><img src="https://s2.loli.net/2022/02/11/nOgDBMlYQmZcub2.jpg" alt="3" loading="lazy"><br><img src="https://s2.loli.net/2022/02/10/JWQpGFSYNAZel3X.jpg" alt="2" loading="lazy"></li>
<li><code>GitHub actions</code> 也<strong>不是立即执行的</strong>，会延迟执行，目前发现慢了14分钟。我这里只是测试一次发现是这个时间，不一定准确。</li>
</ol>
<h1 id="使用vercel部署express"><a href="#使用vercel部署express" class="headerlink" title="使用vercel部署express"></a>使用<code>vercel</code>部署express</h1><p>经过一般测试，发现几个关键点</p>
<ol>
<li>根目录必须有<code>index.js</code>,相当于是<code>vercel</code>的入口文件</li>
<li>根目录必须要有<code>vercel.json</code><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token string">"version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string">"builds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token string">"src"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>
      <span class="token string">"use"</span><span class="token operator">:</span> <span class="token string">"@vercel/node"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"routes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token string">"src"</span><span class="token operator">:</span> <span class="token string">"/(.*)"</span><span class="token punctuation">,</span>
      <span class="token string">"dest"</span><span class="token operator">:</span> <span class="token string">"/"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
用作测试的git仓库地址：<a href="https://github.com/Harry-qi/test-github-actions">https://github.com/Harry-qi/test-github-actions</a></li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果是定时任务可以使用github actions自带的schedule执行，不要使用node-schedule<br>一次性的函数执行也可以使用github actions部署  </p>
<p><code>vercel</code>适合部署接口服务，也可以当作部署博客之类的</p>
]]></content>
  </entry>
  <entry>
    <title>Micro-Frontends</title>
    <url>/blog/2021/02/08/Micro-Frontends/</url>
    <content><![CDATA[<h1 id="微前端-（Micro-Frontends）"><a href="#微前端-（Micro-Frontends）" class="headerlink" title="微前端 （Micro Frontends）"></a>微前端 （Micro Frontends）</h1><h2 id="1-什么是微前端？"><a href="#1-什么是微前端？" class="headerlink" title="1. 什么是微前端？"></a>1. 什么是微前端？</h2><p>将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用可以独立运行、独立开发、独立部署。（概念类似于后端的微服务）</p>
<p>更多可以参考<a href="https://micro-frontends.org/">链接</a></p>
<h2 id="2-能解决什么问题？"><a href="#2-能解决什么问题？" class="headerlink" title="2. 能解决什么问题？"></a>2. 能解决什么问题？</h2><ul>
<li>多种版本多个技术共存（例如<code>Vue1.0</code>、<code>Vue2.6</code>、<code>Vue3.0</code>、<code>React</code>、<code>jQuery</code>在一个应用中存在。</li>
<li>整合老系统<blockquote>
<p>场景：例如一个上古时期的系统用<code>jQuery</code>+<code>jsp</code>开发，代码量很多。现在你接手了，你想用<code>Vue</code>/<code>React</code>来写，打算重构？这时候就可以用微前端来解决来。</p>
</blockquote>
<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h2></li>
<li>独立开发，独立部署</li>
<li>框架无关</li>
<li>增量升级</li>
<li>独立运行时<h2 id="4-微前端的解决方案"><a href="#4-微前端的解决方案" class="headerlink" title="4. 微前端的解决方案"></a>4. 微前端的解决方案</h2></li>
</ul>
<p>自己能想到的是iframe嵌套<br>其他解决方案：</p>
<ul>
<li><p>Nginx路由转发</p>
</li>
<li><p>Web Components</p>
</li>
<li><p>组合式应用路由分发</p>
<p>组合式应用路由分发方案改造成本中等并且能满足大部分需求，也不影响各前端应用的体验，是当下各个业务普遍采用的一种方案</p>
<h2 id="5-微前端框架"><a href="#5-微前端框架" class="headerlink" title="5. 微前端框架"></a>5. 微前端框架</h2></li>
<li><p><a href="https://github.com/single-spa/single-spa">single-spa</a> 最早的微前端框架，兼容多种前端技术栈。</p>
</li>
<li><p><a href="https://github.com/umijs/qiankun">qiankun</a> 基于Single-Spa，阿里系开源微前端框架。**(推荐)**</p>
</li>
<li><p><a href="https://github.com/ice-lab/icestark">icestark</a> 阿里飞冰微前端框架，兼容多种前端技术栈。</p>
</li>
</ul>
<h2 id="6-微前端实践"><a href="#6-微前端实践" class="headerlink" title="6. 微前端实践"></a>6. 微前端实践</h2><p>自己参考<code>qiankun</code>官网写的<a href="https://github.com/Harry-qi/learn-qiankun">demo</a>  </p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://juejin.cn/post/6844904142880800775">记一次 微前端 qiankun 项目 实践 !!! 防踩坑指南</a></li>
<li><a href="https://github.com/kristianmandrup/qiankun-demo">qiankun-demo</a></li>
<li><a href="https://juejin.cn/post/6844904162509979662">微前端-最容易看懂的微前端知识</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>egg初体验</title>
    <url>/blog/2021/08/03/egg%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>最近公司准备用node写全栈项目，于是花了半天时间熟悉了<code>egg</code>的文档，整体下来体验良好，不得不说<code>egg</code>确实不错。</p>
</blockquote>
<h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><pre class="language-shell" data-language="shell"><code class="language-shell">$ mkdir egg-example &amp;&amp; cd egg-example
$ npm init egg --type&#x3D;simple
$ npm i</code></pre>
<p>可以在官网熟悉下<a href="https://eggjs.org/zh-cn/basics/structure.html">目录结构</a>，知道每个目录的作用。<br>我自己的理解：</p>
<ol>
<li><code>app/controller/**</code>是来接受入参，调用<code>service</code>的方法，得到返回<code>service</code>的结果，最后返回结果，即接口最终数据。</li>
<li><code>app/service/**</code>是来根据参数查询数据库，对数据进行处理转换等业务逻辑，然后将处理好的数据返回。</li>
<li><code>app/model/**</code>是用来定义数据表的每个字段</li>
<li><code>app/router.js</code>用来定义接口路径，接口方法(<code>get</code>、<code>post</code>、<code>delete</code>、 <code>put</code>等)</li>
<li><code>config/config.&#123;env&#125;.js</code>用来设置不同环境的配置，<code>config.default.js</code> 为默认的配置文件，所有环境都会加载这个配置文件。<code>config.prod.js</code>如果有<code>config.default.js</code>同名配置，则以<code>config.prod.js</code>为准</li>
<li><code>config/plugin.js</code>插件的注册需要在这里写</li>
<li><code>app/middleware/**</code>这里写一些中间件，例如，我们需要对返回接口统一数据格式，就可以写个中间件。</li>
</ol>
<h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><pre class="language-shell" data-language="shell"><code class="language-shell">$ npm i egg-cors egg-mysql egg-sequelize egg-validate mysql2 -S</code></pre>
<h3 id="2-mysql和sequelize配置"><a href="#2-mysql和sequelize配置" class="headerlink" title="2. mysql和sequelize配置"></a>2. <code>mysql</code>和<code>sequelize</code>配置</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/local.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>mysql <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 单数据库信息配置</span>
  client<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// host</span>
    host<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
    <span class="token comment">// 端口号</span>
    port<span class="token operator">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>
    <span class="token comment">// 用户名</span>
    user<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
    <span class="token comment">// 密码</span>
    password<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
    <span class="token comment">// 数据库名</span>
    database<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否加载到 app 上，默认开启</span>
  app<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否加载到 agent 上，默认关闭</span>
  agent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>sequelize <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment">// 用户名</span>
  password<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment">// 用户密码</span>
  host<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment">// 服务器地址</span>
  port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment">//端口</span>
  database<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment">//数据库名</span>
  define<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    timestamps<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    freezeTableName<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<h3 id="3-跨域配置、中间件的注册"><a href="#3-跨域配置、中间件的注册" class="headerlink" title="3. 跨域配置、中间件的注册"></a>3. 跨域配置、中间件的注册</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在config.default.js中加入</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">appInfo</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// add your middleware config here</span>
  config<span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'response'</span><span class="token punctuation">,</span>
    <span class="token string">'errorHandler'</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 配置跨域</span>
  config<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    origin<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
    <span class="token comment">// &#123;string|Function&#125; origin: '*',</span>
    <span class="token comment">// &#123;string|Array&#125; allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// plugin.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token comment">/** @type Egg.EggPlugin */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// had enabled by egg</span>
  <span class="token comment">// static: &#123;</span>
  <span class="token comment">//   enable: true,</span>
  <span class="token comment">// &#125;</span>
  sequelize<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">'egg-sequelize'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  mysql<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">'egg-mysql'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  validate<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">'egg-validate'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  cors<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">'egg-cors'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="开始写个接口"><a href="#开始写个接口" class="headerlink" title="开始写个接口"></a>开始写个接口</h2><h3 id="1-路由表中定义接口"><a href="#1-路由表中定义接口" class="headerlink" title="1. 路由表中定义接口"></a>1. 路由表中定义接口</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @param &#123;Egg.Application&#125; app - egg application
 */</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> router<span class="token punctuation">,</span> controller <span class="token punctuation">&#125;</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>
  <span class="token keyword">const</span> auth <span class="token operator">=</span> app<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 添加统一的接口前缀</span>
  router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>home<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> auth<span class="token punctuation">,</span> controller<span class="token punctuation">.</span>user<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-创建model，定义数据库"><a href="#2-创建model，定义数据库" class="headerlink" title="2. 创建model，定义数据库"></a>2. 创建<code>model</code>，定义数据库</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// model/user.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">STRING</span><span class="token punctuation">,</span> <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token constant">TIME</span><span class="token punctuation">,</span> <span class="token constant">TINYINT</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> app<span class="token punctuation">.</span>Sequelize<span class="token punctuation">;</span>
  <span class="token keyword">const</span> User <span class="token operator">=</span> app<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token constant">INTEGER</span><span class="token punctuation">,</span> primaryKey<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> autoIncrement<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    account<span class="token operator">:</span> <span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    phone<span class="token operator">:</span> <span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    create_time<span class="token operator">:</span> <span class="token constant">TIME</span><span class="token punctuation">,</span>
    update_time<span class="token operator">:</span> <span class="token constant">TIME</span><span class="token punctuation">,</span>
    modify_user_id<span class="token operator">:</span> <span class="token constant">INTEGER</span><span class="token punctuation">,</span>
    create_user_id<span class="token operator">:</span> <span class="token constant">INTEGER</span><span class="token punctuation">,</span>
    is_delete<span class="token operator">:</span> <span class="token constant">TINYINT</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> User<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</code></pre>

<h3 id="3-service层写逻辑"><a href="#3-service层写逻辑" class="headerlink" title="3. service层写逻辑"></a>3. <code>service</code>层写逻辑</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// service/user.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Service <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">uid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 假如 我们拿到用户 id 从数据库获取用户详细信息</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span><span class="token function">toInt</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> user <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UserService<span class="token punctuation">;</span>
</code></pre>

<h3 id="4-controller层获取入参，调用service的方法并返回数据"><a href="#4-controller层获取入参，调用service的方法并返回数据" class="headerlink" title="4. controller层获取入参，调用service的方法并返回数据"></a>4. <code>controller</code>层获取入参，调用<code>service</code>的方法并返回数据</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// controller/user.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">async</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">;</span>
    <span class="token comment">// 参数校验</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>required<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> userId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span> 
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>service<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> user<span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UserController<span class="token punctuation">;</span>
</code></pre>
<p>注：1. <code>get</code>请求使用<code>this.ctx.query</code>获取参数；<code>post</code>使用<code>this.ctx.request.body</code>来获取参数，更多参考<a href="https://eggjs.org/zh-cn/basics/controller.html#%E8%8E%B7%E5%8F%96-http-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0">文档</a><br>2. 参数校验使用来<code>egg-validate</code>，在<code>plugin.js</code>中注册了，就可以通过<code>this.ctx.validate</code>使用(插件会挂载到ctx上)，如果不满足校验规则，则会给出提示，如下<br><img src="https://i.loli.net/2021/08/03/MC3SwBPNHuRxzFn.png" alt="错误提示" loading="lazy"><br>3. <code>findByPk</code>是<code>Sequelize</code>的方法，更多的api可以查看<a href="https://www.sequelize.com.cn/">文档</a><br>4. 如果在<code>model</code>层中未定义字段，使用create或者find等其他方法的时候就不会插入或者查到该字段。<strong>所以如果中途改数据库(例如增加字段，修改字段等操作)，一定要在<code>model</code>层及时修改</strong></p>
<p>至此，一个简单的查询接口就完成了，效果如下图<br><img src="https://i.loli.net/2021/08/03/DBeo75jcgnzFh1E.png" alt="效果图" loading="lazy"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体下来明白了<code>model</code>、<code>service</code>、<code>controller</code>每层的作用，写的时候就清晰很多，更多的就是熟悉<code>Sequelize</code>的<code>api</code>来完成业务。</p>
]]></content>
      <tags>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>egg项目总结</title>
    <url>/blog/2021/09/02/egg%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>最近用egg做了一个完整的后端项目，借此总结下项目中用到的重要知识点</p>
</blockquote>
<h1 id="1-跨域问题"><a href="#1-跨域问题" class="headerlink" title="1. 跨域问题"></a>1. 跨域问题</h1><p>之前一直使用<code>egg-cors</code>，配置如下，这也是<a href="https://www.npmjs.com/package/egg-cors#configuration">文档</a>中默认配置</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.default.js</span>
config<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    origin<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
    <span class="token comment">// &#123;string|Function&#125; origin: '*',</span>
    <span class="token comment">// &#123;string|Array&#125; allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>后面有个需求，在另外一个网站里调用本项目的接口，一直报跨域的错，错误如下<br><img src="https://i.loli.net/2021/09/02/rCdG924tZJcTnuB.png" alt="报错" loading="lazy"><br>大致意思就是有<code>withcredentials</code>的时候不能设置<code>*</code>。<br>看了下<code>egg-cors</code>文档没写withcredentials的相关配置，但是我注意到<code>egg-cors</code>是基于@koa/cors的，就看到@koa/cors的<a href="https://github.com/koajs/cors#corsoptions">文档</a><br>修改配置如下</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.default.js</span>
config<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    origin<span class="token operator">:</span> <span class="token string">'https://www.xxx.com'</span><span class="token punctuation">,</span>
    allowMethods<span class="token operator">:</span> <span class="token string">'GET,HEAD,PUT,POST,DELETE,PATCH'</span><span class="token punctuation">,</span>
    <span class="token comment">// Access-Control-Allow-Credentials</span>
    credentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>这样在xxx网站上调用接口是没有报错的，但是我这个项目还有其他网站调用的，所以我改下<code>origin</code>为</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.default.js</span>
config<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    origin<span class="token operator">:</span> <span class="token string">'https://www.xxx.com,'</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token string">','</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>bbb<span class="token punctuation">.</span>cn<span class="token string">''</span><span class="token punctuation">,</span>
    allowMethods<span class="token operator">:</span> <span class="token string">'GET,HEAD,PUT,POST,DELETE,PATCH'</span><span class="token punctuation">,</span>
    <span class="token comment">// Access-Control-Allow-Credentials</span>
    credentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>运行了下，直接报错了。查了相关资料<code>origin</code>是不能这样设置的。在<code>egg-cors</code>中设置多个<code>origin</code>需要如下设置</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">config<span class="token punctuation">.</span>security <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
   csrf<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
     enable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
   domainWhiteList<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'https://www.xx.com'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span> <span class="token string">'https://www.bbb.cn'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token comment">// 配置跨域</span>
 config<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
   origin<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
   allowMethods<span class="token operator">:</span> <span class="token string">'GET,HEAD,PUT,POST,DELETE,PATCH'</span><span class="token punctuation">,</span>
   <span class="token comment">// Access-Control-Allow-Credentials</span>
   credentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>至此，跨域问题已经解决。</p>
<h1 id="2-联表查询"><a href="#2-联表查询" class="headerlink" title="2. 联表查询"></a>2. 联表查询</h1><blockquote>
<p>之前都是获取到数据，再循环数据再次查询数据库，这样做法确实不优雅，于是查询相关资料如何联表查询<br>业务场景：动态中有多个评论，所以我要根据动态id查询该动态内容以及所有评论</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// model/sf_activity.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定义字段</span>
    <span class="token comment">//  const Model = app.model.define(...)</span>
    Model<span class="token punctuation">.</span><span class="token function-variable function">associate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 一个动态有多个评论</span>
        app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfActivity<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfComment<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> foreignKey<span class="token operator">:</span> <span class="token string">'activity_id'</span><span class="token punctuation">,</span> targetKey<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'commentList'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// model/sf_comment.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定义字段</span>
    <span class="token comment">//  const Model = app.model.define(...)</span>
    <span class="token comment">// 评论属于动态</span>
     Model<span class="token punctuation">.</span><span class="token function-variable function">associate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfComment<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfActivity<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> foreignKey<span class="token operator">:</span> <span class="token string">'activity_id'</span><span class="token punctuation">,</span> targetKey<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'commentList'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><code>foreignKey</code>是外键</p>
<blockquote>
<p>A.hasOne(B) 关联意味着 A 和 B 之间存在一对一的关系,外键在目标模型(B)中定义.  </p>
<p>A.belongsTo(B)关联意味着 A 和 B 之间存在一对一的关系,外键在源模型中定义(A).</p>
<p>A.hasMany(B) 关联意味着 A 和 B 之间存在一对多关系,外键在目标模型(B)中定义.</p>
</blockquote>
<p>使用联表查询</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">get</span> <span class="token function">SfActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfActivity<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">get</span> <span class="token function">SfComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SfComment<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 <span class="token keyword">async</span> <span class="token function">findList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>SfActivity<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      order<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">'update_time'</span><span class="token punctuation">,</span> <span class="token string">'DESC'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        is_delete<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      attributes<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'user_name'</span><span class="token punctuation">,</span> <span class="token string">'dept_id'</span><span class="token punctuation">,</span> <span class="token string">'form_content'</span><span class="token punctuation">,</span> <span class="token string">'update_time'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      include<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        model<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>SfComment<span class="token punctuation">,</span>
        <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'commentList'</span><span class="token punctuation">,</span>
        attributes<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'create_user_name'</span><span class="token punctuation">,</span> <span class="token string">'parent_comment_id'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// 字段比较多，可以使用exclude排除 &#123; exclude: ['id'] &#125;</span>
        where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          is_delete<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        required<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 左外连接</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      offset<span class="token operator">:</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">,</span>
      limit<span class="token operator">:</span> pageSize <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>注意：</p>
<ol>
<li>用<code>include</code>字段使用联表查询</li>
<li><code>as</code>是别名，需要在<code>sf_activity.js</code>和<code>sf_comment.js</code>中写，注意一定要统一</li>
<li><code>attributes</code>返回接口用这个筛选部分字段，默认不写<code>attributes</code>就是查的所有字段<br>结果如下<br><img src="https://i.loli.net/2021/09/02/qGhb7PWxzIv5lme.png" alt="结果" loading="lazy"><h1 id="3-自动创建数据库字段"><a href="#3-自动创建数据库字段" class="headerlink" title="3. 自动创建数据库字段"></a>3. 自动创建数据库字段</h1>使用<code>egg-sequelize-auto</code><br>代码如下<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// auto.js</span>
<span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> SequelizeAuto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg-sequelize-auto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config/config.local.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  database<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>database<span class="token punctuation">,</span>
  host<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>host<span class="token punctuation">,</span>
  port<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>port<span class="token punctuation">,</span>
  username<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>username<span class="token punctuation">,</span>
  password<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>password<span class="token punctuation">,</span>
  dialect<span class="token operator">:</span> devConfig<span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span>dialect<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> auto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequelizeAuto</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>database<span class="token punctuation">,</span> db<span class="token punctuation">.</span>username<span class="token punctuation">,</span> db<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> db<span class="token punctuation">.</span>host<span class="token punctuation">,</span>
  dialect<span class="token operator">:</span> db<span class="token punctuation">.</span>dialect<span class="token punctuation">,</span>
  directory<span class="token operator">:</span> <span class="token string">'./app/model/'</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件夹</span>
  port<span class="token operator">:</span> db<span class="token punctuation">.</span>port<span class="token punctuation">,</span>
  additional<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    timestamps<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  tables<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'sf_activity'</span><span class="token punctuation">,</span> <span class="token string">'sf_comment'</span><span class="token punctuation">,</span> <span class="token string">'sf_like'</span><span class="token punctuation">,</span> <span class="token string">'sf_read'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定的表</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

auto<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
注意</li>
<li>用<code>tables</code>来指定部分需要写入的表(有的时候不一定用得上数据库中所有表)<br>再在<code>package.json</code>中增加命令<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token string">"model"</span><span class="token operator">:</span> <span class="token string">"node auto.js"</span>
<span class="token punctuation">&#125;</span></code></pre>
效果如下<br><img src="https://i.loli.net/2021/09/02/4Yai6EDQosHzcmf.png" alt="结果" loading="lazy"><br>注意点：</li>
<li><code>egg</code>中的eslint默认要在第一行增加<code>&#39;use strict&#39;;</code>，但是<code>egg-sequelize-auto</code>是没有的，需要手动加</li>
<li>生成代码<code>sequelize</code>未定义，如下<br><img src="https://i.loli.net/2021/09/02/c4gfGKW8zuL1lXp.png" alt="问题" loading="lazy"><br>需要手动修改为app.Sequelize<h1 id="4-格式化时间"><a href="#4-格式化时间" class="headerlink" title="4. 格式化时间"></a>4. 格式化时间</h1><blockquote>
<p>默认情况下时间是 2021-09-07T14:15:34.000Z 这种格式，看起来很别扭，一般需要格式化成：2021-09-07 14:15:34<br>只需要增加<code>config/local.js</code>（以及其他环境中），的<code>dialectOptions</code>配置</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>sequelize <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  dialect<span class="token operator">:</span> <span class="token string">'xx'</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> <span class="token string">'xx'</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
  host<span class="token operator">:</span> <span class="token string">'xxxxx'</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>
  timezone<span class="token operator">:</span> <span class="token string">'+08:00'</span><span class="token punctuation">,</span>
  define<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    timestamps<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    freezeTableName<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  dialectOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    dateStrings<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    typeCast<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<h1 id="5-查看日志"><a href="#5-查看日志" class="headerlink" title="5.查看日志"></a>5.查看日志</h1>定义日志名称以及位置:<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/default.js</span>
config<span class="token punctuation">.</span>logger <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  dir<span class="token operator">:</span> <span class="token string">'logs/egg-for-xx'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
服务器查看日志<br>进入日志路径 <pre class="language-shell" data-language="shell"><code class="language-shell">cd &#x2F;home&#x2F;xxx&#x2F;logs&#x2F;xxx
# 查看倒数100行
tail -fn 100 common-error.log
# 或者
tail -fn 100 egg-for-xx-web.log </code></pre>

</li>
</ol>
<h1 id="6-子查询"><a href="#6-子查询" class="headerlink" title="6. 子查询"></a>6. 子查询</h1><blockquote>
<p>场景：我们需要返回一个课程列表，并且每条课程需要展示课时的数量<br><a href="https://www.sequelize.com.cn/other-topics/sub-queries">文档</a></p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">classList</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Op<span class="token punctuation">,</span> literal <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Sequelize<span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> offset<span class="token punctuation">,</span> limit <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>
   <span class="token keyword">const</span> search <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     search<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
       <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>like<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Course<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
     where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
       <span class="token operator">...</span>search<span class="token punctuation">,</span>
       is_delete<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     attributes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
       exclude<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'is_delete'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
       include<span class="token operator">:</span> <span class="token punctuation">[</span>
         <span class="token punctuation">[</span> <span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">'(SELECT COUNT(*) FROM lesson WHERE lesson.lesson_id = Course.id)'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lessonNums'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 这里就是子查询</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     include<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
       model<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ClassIfication<span class="token punctuation">,</span>
       <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'classification'</span><span class="token punctuation">,</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
     offset<span class="token punctuation">,</span>
     limit<span class="token punctuation">,</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span></code></pre>
<h1 id="多个别名"><a href="#多个别名" class="headerlink" title="多个别名"></a>多个别名</h1><blockquote>
<p>场景：在查询课程详情的时候需要展示课时列表，这是别名是lessonList<br>在查询课时的时候需要展示一些课程的信息，这是的别名需要是courseInfo<br>其实就是写两个 <code>associate</code></p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">Model<span class="token punctuation">.</span><span class="token function-variable function">associate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 课程下可能有多个课时</span>
    app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Course<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Lesson<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> foreignKey<span class="token operator">:</span> <span class="token string">'lesson_id'</span><span class="token punctuation">,</span> targetKey<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'lessonList'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Course<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Lesson<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> foreignKey<span class="token operator">:</span> <span class="token string">'lesson_id'</span><span class="token punctuation">,</span> targetKey<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">'courseInfo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      <tags>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins搭配gitlab的webhook实现自动化部署</title>
    <url>/blog/2020/11/11/jenkins/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>每次写完代码就要进行的机械工作：</p>
<ul>
<li>提交代码，push到分支。</li>
<li>打包然后把dist目录下的文件用ftp上传到服务器 。  </li>
</ul>
</blockquote>
<blockquote>
<p>这种机械工作，做久了，就觉得很繁琐，于是我就想做一些自动化部署的工作来简化工作。  </p>
</blockquote>
<h2 id="公司技术"><a href="#公司技术" class="headerlink" title="公司技术"></a>公司技术</h2><ul>
<li>代码使用gitlab管理(版本8.5.7)</li>
<li>前端vue </li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li><a href="https://www.jenkins.io/zh/doc/book/installing/#war%E6%96%87%E4%BB%B6">安装jenkins</a><blockquote>
<p>注意点: </p>
<ul>
<li>默认是80端口，如果启动jenkins失败，要更换下端口启动，例如<code>java -jar jenkins.war --httpPort=8001</code></li>
<li>安装插件比较慢，如果部分插件没安装成功，可以先跳过，进入主页面</li>
</ul>
</blockquote>
</li>
<li>新建任务，选择第一个类型的<br><a href="https://imgchr.com/i/BXW3Yn"><img src="https://s1.ax1x.com/2020/11/11/BXW3Yn.png" alt="BXW3Yn.png" loading="lazy"></a></li>
<li>源码管理<ul>
<li><code>Credentials</code>这里我选择的是用户名和密码</li>
<li><code>Branches to build</code> 这里我选择的是<code>master</code>，就是说<code>master</code>的代码变动后就会触发<br><a href="https://imgchr.com/i/BXWdw4"><img src="https://s1.ax1x.com/2020/11/11/BXWdw4.png" alt="BXWdw4.png" loading="lazy"></a> </li>
</ul>
</li>
<li>构建触发器</li>
<li>选择<code>Generic Webhook Trigger</code></li>
<li><code>Token</code>这里随意定义<br><a href="https://imgchr.com/i/BXWwTJ"><img src="https://s1.ax1x.com/2020/11/11/BXWwTJ.png" alt="BXWwTJ.png" loading="lazy"></a></li>
<li>构建</li>
<li>我选择的是执行<code>shell</code><br><a href="https://imgchr.com/i/BXWamF"><img src="https://s1.ax1x.com/2020/11/11/BXWamF.png" alt="BXWamF.png" loading="lazy"></a></li>
<li><code>$WORKSPACE</code>是jenkins自带的变量，<code>git push</code>的代码回退到<code>$WORKSPACE</code>目录下，你可以<code>echo $WORKSPACE</code>打印下，看下具体在哪里。</li>
<li><code>cd $WORKSPACE &amp;&amp; npm i &amp;&amp; npm run build</code> 进入目录，安装依赖，进行打包。</li>
<li><code> cp -R  $WORKSPACE/dist/.  /usr/share/nginx/html</code> 复制打包好的<code>dist</code>目录的文件到<code>nginx</code>的<code>html</code>目录下。这里<code>/usr/share/nginx/html</code>可以根据具体目录进行修改。</li>
<li>设置gitlab的webhook</li>
<li>进入项目，选择settings，再选择Web hooks(这里根据gitlab版本不同，找到Web hooks的步骤可能不同)<br><a href="https://imgchr.com/i/BXWtyT"><img src="https://s1.ax1x.com/2020/11/11/BXWtyT.png" alt="BXWtyT.png" loading="lazy"></a></li>
<li><code>URL</code> 填写<code>http://服务器IP:端口号/generic-webhook-trigger/invoke?token=webhook_token</code> 这里 token填写就是当时我们在jenkins<strong>构建触发器</strong>步骤填写的<code>Token</code>，一定要保持一致。  </li>
</ul>
<blockquote>
<p>注意：这里的URL是根据每个版本的jenkins提示的URL填写即可，如下图，提示的URL是没有 <code>generic-webhook-trigger/invoke?</code>的<br><img src="https://s2.loli.net/2022/01/25/PnaN5MVJZky34tG.jpg" alt="1" loading="lazy"></p>
</blockquote>
<ul>
<li><code>Trigger</code> 可以根据实际需求勾选,我只是按照默认的勾选<code>push</code>。</li>
<li>至此，jenkins和gitlab的设置已经全部设置完成，可以进行git push看看效果了 </li>
</ul>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li>我们<code>push</code>代码后，可以看到jenkins已经在自动进行构建了。<br><a href="https://imgchr.com/i/BXWNOU"><img src="https://s1.ax1x.com/2020/11/11/BXWNOU.png" alt="BXWNOU.png" loading="lazy"></a></li>
<li>点进去可以看到git commit的信息<br><a href="https://imgchr.com/i/BXWBk9"><img src="https://s1.ax1x.com/2020/11/11/BXWBk9.png" alt="BXWBk9.png" loading="lazy"></a></li>
<li>点击<code>控制台输出</code>，可以看到在自动打包，并且构建完成，没有报错。<br><a href="https://imgchr.com/i/BXWDYR"><img src="https://s1.ax1x.com/2020/11/11/BXWDYR.png" alt="BXWDYR.png" loading="lazy"></a></li>
</ul>
<h2 id="2022-01-25更新"><a href="#2022-01-25更新" class="headerlink" title="2022-01-25更新"></a>2022-01-25更新</h2><p>这次是需要指定分支推送才触发自动化部署，具体操作如下<br><img src="https://s2.loli.net/2022/01/25/DaRYV8tpT4QxN2z.jpg" alt="q" loading="lazy"><br>点击构建触发器-&gt;在 Build when a change is pushed to GitLab中点击高级<br><img src="https://s2.loli.net/2022/01/25/q53VTItumpnhbOy.jpg" alt="q1" loading="lazy"><br>其实就是在jenkins中加入过滤分支即可，gitlab是不用设置分支的</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次接触jenkins，搭配gitlab的webhook实现自动打包，效果还是可以的。</p>
]]></content>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>js-类型相关</title>
    <url>/blog/2021/07/04/js-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>无论什么语言，最基础的就是类型了，今天把js类型相关的总结下。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol>
<li>基本数据类型：Undefined、Null、Number、String、Boolean</li>
<li>复杂数据类型：Object</li>
<li>引用类型：Object、Array、Date、RegExp、Function</li>
</ol>
<h1 id="区分方式"><a href="#区分方式" class="headerlink" title="区分方式"></a>区分方式</h1><h2 id="1-区分基本数据类型用操作符typeof即可"><a href="#1-区分基本数据类型用操作符typeof即可" class="headerlink" title="1. 区分基本数据类型用操作符typeof即可"></a>1. 区分基本数据类型用操作符<code>typeof</code>即可</h2><p>注意点: </p>
<p>1.<code>typeof</code> 返回值有：”undefined” “number” “string” “boolean” “object” “function”  </p>
<ol start="2">
<li><p><code>typeof null</code> 返回”object” </p>
</li>
<li><p>从技术上角度讲，函数在ECMAscript中是对象，不是一种数据类型。然而，函数也确实有一些特殊的属性，因此通过<code>typeof</code>操作符来区分函数和其他的对象是有必要的 （引用红宝书） </p>
</li>
<li><p>关于<code>null</code>和<code>undefined</code>的理解：之前我看过一张很形象区分这两者的图片，<br><img src="https://pic1.zhimg.com/v2-ae5b7d880c10946840c813b5257ce5a2_r.jpg?source=1940ef5c" alt="图片" loading="lazy"><br><code>null</code>就是用完的卷纸，只剩下空的纸筒，而<code>undefined</code>是什么都没有。<br>在实际应用中，如果我们前端需要后端传给我们一个字段如<code>title</code>，然而，后端根本没传，此时就是<code>undefined</code>，或者后端传了，但是数据库没有，则此时就会得到<code>null</code></p>
</li>
</ol>
<h2 id="2-用instanceof操作符来区分引用类型"><a href="#2-用instanceof操作符来区分引用类型" class="headerlink" title="2. 用instanceof操作符来区分引用类型"></a>2. 用<code>instanceof</code>操作符来区分引用类型</h2><p>注意点：<code>instanceof</code>操作符存在多个全局作用域（像一个页面包含多个frame）的情况下，就会存在问题。</p>
<h2 id="3-最安全检测类型的方式是Object-prototype-toString-call"><a href="#3-最安全检测类型的方式是Object-prototype-toString-call" class="headerlink" title="3. 最安全检测类型的方式是Object.prototype.toString().call()"></a>3. 最安全检测类型的方式是<code>Object.prototype.toString().call()</code></h2><blockquote>
<p>这里假定原型没有被修改</p>
</blockquote>
<h2 id="4-特定数据类型的检查方式"><a href="#4-特定数据类型的检查方式" class="headerlink" title="4. 特定数据类型的检查方式"></a>4. 特定数据类型的检查方式</h2><p>Array.isArray()<br>isNaN()</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>基本类型的变量是存放在栈内存（Stack）里的，引用类型是在堆内存中。 </p>
<p>基本类型的变量赋值是直接在内存中增加了一块区域。而引用类型的赋值只是改变下指针，要是引用类型的值改变，则赋值的那个变量也会改变。要是不想这样就需要用深拷贝了</p>
]]></content>
  </entry>
  <entry>
    <title>linux命令</title>
    <url>/blog/2020/11/11/linux/</url>
    <content><![CDATA[<h1 id="记录下在部署项目时候用到的命令"><a href="#记录下在部署项目时候用到的命令" class="headerlink" title="记录下在部署项目时候用到的命令"></a>记录下在部署项目时候用到的命令</h1><blockquote>
<p> 使用linux时间不长，特意记录下平时用到的命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ps -ef</td>
<td>grep nginx</td>
</tr>
<tr>
<td>kill -9 <PID></td>
<td>彻底杀死进程</td>
</tr>
<tr>
<td>chmod +x /usr/local/src/jenkins/jenkins.sh</td>
<td>设置可执行权限</td>
</tr>
<tr>
<td>rm -rf</td>
<td>递归强制删除文件夹</td>
</tr>
<tr>
<td>cp -r /home/packageA/* /home/cp/packageB/</td>
<td>递归复制 packageA 下的所有文件拷贝到 packageB</td>
</tr>
<tr>
<td>rm -rf</td>
<td>递归强制删除</td>
</tr>
<tr>
<td>cat</td>
<td>查看文件</td>
</tr>
<tr>
<td>whereis</td>
<td>用于程序名的搜索</td>
</tr>
<tr>
<td>:q!</td>
<td>不保存并且强制退出</td>
</tr>
<tr>
<td>:wq</td>
<td>保存后离开 vi</td>
</tr>
<tr>
<td>scp output.txt <a href="mailto:&#x72;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x31;&#46;&#48;">&#x72;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x31;&#46;&#48;</a>:/data/</td>
<td>本地拷贝文件到远程服务器</td>
</tr>
<tr>
<td>netstat -lnp &#124; grep 88</td>
<td>检查端口被哪个进程占用</td>
</tr>
<tr>
<td>ssh-copy-id <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#x31;&#x2e;&#48;">&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#x31;&#x2e;&#48;</a></td>
<td>将本机的公钥复制到远程机器的authorized_keys文件中，这样输入一次密码后以后就不用输密码了</td>
</tr>
<tr>
<td>tail -fn 100 common-error.log</td>
<td>查看日志，100为倒数100行</td>
</tr>
<tr>
<td>top</td>
<td>查看cpu占用</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>node-sass升级到sass</title>
    <url>/blog/2022/02/15/node-sass%E5%8D%87%E7%BA%A7%E5%88%B0sass/</url>
    <content><![CDATA[<blockquote>
<p>最近准备把公司使用的node版本进行升级，我们的UI库是基于ElementUI基础上进行开发的，在升级node过程中遇到一些问题，记录如下</p>
</blockquote>
<h1 id="尝试1：直接升级node版本"><a href="#尝试1：直接升级node版本" class="headerlink" title="尝试1：直接升级node版本"></a>尝试1：直接升级node版本</h1><p>发现一些c++的编译报错，如下图<br><img src="https://s2.loli.net/2022/02/15/IygMs2aEnQ7Lvtf.jpg" alt="1" loading="lazy"></p>
<h1 id="尝试2-卸载node-sass，安装sass"><a href="#尝试2-卸载node-sass，安装sass" class="headerlink" title="尝试2: 卸载node-sass，安装sass"></a>尝试2: 卸载<code>node-sass</code>，安装<code>sass</code></h1><p>在网上进行了一些搜索，<a href="https://zhuanlan.zhihu.com/p/168018388">https://zhuanlan.zhihu.com/p/168018388</a><br>文章中使用了别名，相当于引用的是<code>node-sass</code>但是实际使用的是<code>sass</code>。<br>全局搜索了下<code>node-sass</code>，然后发现UI库中还使用了<code>gulp-sass</code>，该包内部使用了<code>node-sass</code>。所以单单修改别名还是不行的，得把<code>gulp-sass</code>也要解决掉。  </p>
<h1 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h1><p>在elementUI的issue中看到看到<code>node-sass</code>升级到<code>sass</code>的讨论，最终看到相关的<a href="https://github.com/ElemeFE/element/commit/d6dedac2e2cb5f1f171f8ce32a9bbcdf6dab82d4">pr</a>。根据该Pr进行了升级。<br>升级了sass和sass-loader，并且将<code>gulp-sass</code>升级到<code>gulp-dart-sass</code>，还需要修改相关语法。<br>相关语法主要是 </p>
<ul>
<li>/deep/ -&gt; ::v-deep</li>
<li>除法<code>/</code> 修改为 <code>math.div</code>并使用<code>@use &quot;sass:math&quot;;</code></li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/168018388">https://zhuanlan.zhihu.com/p/168018388</a></li>
<li><a href="https://github.com/ElemeFE/element/commit/d6dedac2e2cb5f1f171f8ce32a9bbcdf6dab82d4">https://github.com/ElemeFE/element/commit/d6dedac2e2cb5f1f171f8ce32a9bbcdf6dab82d4</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>nvm</title>
    <url>/blog/2021/02/08/nvm/</url>
    <content><![CDATA[<p>nvm安装和使用<br>nvm是用来切换不同的node版本的</p>
<ol>
<li><p>先下载</p>
<blockquote>
<p> 想要安装最新版，可以在GitHub上查看<a href="https://github.com/nvm-sh/nvm/releases">最新版本</a> 再修改下面命令的版本号</p>
</blockquote>
<pre class="language-none"><code class="language-none">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.2&#x2F;install.sh | bash</code></pre>
<p><del>或者</del><br><del>npm i nvm</del> (<a href="https://www.npmjs.com/package/nvm">nvm的npm</a>包已经废除)</p>
</li>
<li><p>在.zshrc配置变量</p>
<pre class="language-none"><code class="language-none">vim ~&#x2F;.zshrc</code></pre>
<pre class="language-none"><code class="language-none">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;
[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot;  # This loads nvm
[ -s &quot;$NVM_DIR&#x2F;bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;bash_completion&quot;  # This loads nvm bash_completion</code></pre></li>
<li><p>更新配置 （每次修改.zshrc就要更新不然不生效）</p>
<pre class="language-none"><code class="language-none">source ~&#x2F;.zshrc</code></pre></li>
<li><p>查看是否安装成功<br>help命令是每个node写的命令行工具都有的命令</p>
<pre class="language-none"><code class="language-none">nvm help </code></pre></li>
<li><p>常用命令<br><code>nvm install &lt;version&gt; [arch]</code> 安装node，arch默认是系统位数。在 <a href="https://nodejs.org/zh-cn/download/releases/">历史版本</a> 中查看想要下载的版本<br><code>nvm list [available]</code> 显示已安装的列表。list可简化为ls。<br><code>nvm uninstall &lt;version&gt;</code>  卸载指定版本node。<br><code>nvm use [version]</code>  使用制定版本node。<br>自己的使用过程</p>
<pre class="language-none"><code class="language-none">nvm install 14.15.4
nvm install 13.7.0
nvm ls
nvm use 14.15.4
&#96;&#96;&#96;   

## 注意
在使用过程中，我发现每次打开终端使用的node版本是不一致的。例如我node默认版本是10.15.0，我打开终端然后使用16.13.0，然后打开WebStorm的终端就发现还是10.15.0。 

但是大部分项目我是想使用最新稳定版本的，就需要通过以下方法解决。
### 解决方法
&#96;&#96;&#96;shell
nvm alias default stable </code></pre>
<p>stable是最新稳定版，或者你可以设置具体的版本号，例如 <code>nvm alias default 16.13.0</code></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Puppeteer生成pdf</title>
    <url>/blog/2020/12/04/puppeteer/</url>
    <content><![CDATA[<blockquote>
<p>最近公司业务需要打印pdf的功能，先说需求：</p>
<ul>
<li>封面(就是第一页内容)在web端不用展示，打印的pdf需要展示封面。 </li>
<li>内容最多会有6页。  </li>
</ul>
<p>分析过程：</p>
<ul>
<li>打印简单的pdf(不超过一页内容)的使用原生的window.print()或者<code>vue-print-nb</code>，但是我们公司的pdf内容有十页左右，在实际测试中，不同电脑分页情况还不一样，效果不好。  </li>
<li>查了下原因，因为每台电脑的dpi不同，导致打印的宽高度不一样。</li>
<li>尝试用<code>html2canvas</code>，但是问题挺多的，超过一屏幕的内容就截取不了。 </li>
<li>之前了解过<code>Puppeteer</code>，可以用来 生成页面pdf，还可以爬虫等等。 </li>
<li><code>Puppeteer</code>默认会安装一个特定版本的<code>chrome</code>，因为在<code>node</code>接口是放在服务器上，<code>node</code>接口调用<code>Puppeteer</code>启动是<code>Puppeteer</code>安装的的chrome，那我只要适配这款<code>chrome</code>就行了，这样就不存在电脑差异问题了。  </li>
</ul>
</blockquote>
<p>说明：</p>
<ol>
<li>公司服务器是centos7</li>
<li>前端vue<h2 id="1-安装Puppeteer"><a href="#1-安装Puppeteer" class="headerlink" title="1. 安装Puppeteer"></a>1. 安装Puppeteer</h2><code>npm install  puppeteer --unsafe-perm=true</code>（要加<code>--unsafe-perm=true</code>否则会提示权限不足）<h2 id="2-安装Puppeteer依赖"><a href="#2-安装Puppeteer依赖" class="headerlink" title="2. 安装Puppeteer依赖"></a>2. <a href="https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#chrome-headless-doesnt-launch-on-unix">安装Puppeteer依赖</a></h2>先根据服务器安装的系统安装相关<code>Puppeteer</code>依赖，防止启动<code>Puppeteer</code>失败。<h2 id="3-生成pdf代码"><a href="#3-生成pdf代码" class="headerlink" title="3. 生成pdf代码"></a>3. 生成pdf代码</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token string">'xxxx'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'xxxxxx'</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">printPdf</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>callBack</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> headless<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> args<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开浏览器</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开一个空白页</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>width<span class="token operator">:</span> <span class="token number">1920</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置视窗</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">'http://example.com/login'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> waitUntil<span class="token operator">:</span> <span class="token string">'networkidle0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输入账号密码</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">".ant-form-item:nth-child(1) .ant-input"</span><span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">".ant-form-item:nth-child(2) .ant-input"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 登录</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">'.login-form-button'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForNavigation</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> waitUntil<span class="token operator">:</span> <span class="token string">'networkidle0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 跳到报告页面</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://example.com/report/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> waitUntil<span class="token operator">:</span> <span class="token string">'networkidle0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">pdf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      path<span class="token operator">:</span> <span class="token string">'res.pdf'</span><span class="token punctuation">,</span>
      printBackground<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span><span class="token string">'A4'</span><span class="token punctuation">,</span>
      margin<span class="token operator">:</span><span class="token punctuation">&#123;</span>
       left<span class="token operator">:</span><span class="token string">'5px'</span><span class="token punctuation">,</span>
       right<span class="token operator">:</span><span class="token string">'5px'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关掉浏览器</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<h2 id="4-node接口"><a href="#4-node接口" class="headerlink" title="4. node接口"></a>4. node接口</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"querystring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> printFn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./print-pdf.js'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> secret <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./secret'</span><span class="token punctuation">)</span>  <span class="token comment">// 使用crypto-js解密id 这步骤可以省略</span>
<span class="token keyword">const</span> server<span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 设置跨域</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//允许的header类型</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//跨域允许的请求方式</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span><span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

  <span class="token comment">// 获取参数</span>
  <span class="token keyword">const</span> requestUrl <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">const</span> arg <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">'/printPdf'</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> id <span class="token operator">=</span> secret<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment">// 解密id</span>
    printFn<span class="token punctuation">.</span><span class="token function">printPdf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./res.pdf'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
          <span class="token comment">// encode name 因为filename不能中文</span>
          <span class="token keyword">let</span> realName <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span>
          realName <span class="token operator">=</span> realName<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'iso8859-1'</span><span class="token punctuation">)</span>
          <span class="token comment">// 返回pdf文件</span>
          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment; filename="</span><span class="token operator">+</span>realName<span class="token operator">+</span><span class="token string">'.pdf'</span> <span class="token punctuation">)</span>
          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
           response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8004</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>当时遇到一个问题，前端接口发送到<code>node</code>了，但是没有返回，查看控制台接口状态是<code>cancel</code>，没有其他报错。<br>最后发现前端<code>axios</code>的<code>timeout</code>是5秒，但是我写的这个<code>node</code>接口大概7秒。修改<code>timeout</code>就可以了。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>这次接触<code>Puppeteer</code>,安装使用的时候各种报错，好在<code>github</code>都有这种<code>issue</code>，能够找到解决方案。这次也是第一次接触<code>node</code>，用<code>node</code>写接口,遇到跨域问题，返回请求头的问题等等。</li>
</ol>
<hr>
<h3 id="20210823更新"><a href="#20210823更新" class="headerlink" title="20210823更新"></a>20210823更新</h3><blockquote>
<blockquote>
<p>最近又有打印需求，然后用express写了下。对比原生的<code>node</code>代码会更简洁，<br>顺便封装了下打印方法</p>
</blockquote>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span>
<span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 


<span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolvePath</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 删除文件</span>
  <span class="token function">deleteFile</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 打印</span>
  <span class="token keyword">async</span> <span class="token function">printFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>size<span class="token punctuation">,</span>url<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> headless<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> args<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开浏览器</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开一个空白页</span>
  
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>width<span class="token operator">:</span> <span class="token number">1920</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置视窗</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> waitUntil<span class="token operator">:</span> <span class="token string">'networkidle0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">pdf</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      printBackground<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> size <span class="token operator">||</span> <span class="token string">'A4'</span><span class="token punctuation">,</span>
      margin<span class="token operator">:</span><span class="token punctuation">&#123;</span>
       left<span class="token operator">:</span><span class="token string">'5px'</span><span class="token punctuation">,</span>
       right<span class="token operator">:</span><span class="token string">'5px'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关掉浏览器</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> index</code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// utils.js</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>printFn<span class="token punctuation">,</span>resolvePath<span class="token punctuation">,</span> deleteFile<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils.js'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> cors<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token comment">// 设置跨域</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query
  <span class="token keyword">const</span> query <span class="token operator">=</span>  <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">"https://www.baidu.com"</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">await</span> <span class="token function">printFn</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pdfPath <span class="token operator">=</span> <span class="token function">resolvePath</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>pdfPath<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token comment">// 下载后删除临时文件</span>
      <span class="token function">deleteFile</span><span class="token punctuation">(</span>pdfPath<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">node app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>vue-element-admin权限验证</title>
    <url>/blog/2021/06/25/vue-element-admin%E6%9D%83%E9%99%90%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<blockquote>
<p>用<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>做了好多项目,vue-element-admin项目中有很多可以总结的地方，例如 权限验证的解决方案、mock的解决方案、svg的icon解决方案以及webpack打包的优化等，从中都可以学到很多。本文先从权限的解决方案先总结起，日后有时间再总结下其他的内容。</p>
</blockquote>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>请求后端接口，获取当前用户的权限，确认后端返回权限字段的内容。</li>
<li>设置路由表的mete权限字段(根据后端接口返回的内容)。</li>
<li>router.beforeEach的时候将请求的权限和路由表的权限进行对比，筛选出符合的路由，利用<code>vue-router</code>的<code>router.addRoutes</code>API将符合条件的路由挂载到 router 上。</li>
<li>将符合条件的路由数组渲染到侧边栏的菜单。</li>
</ol>
<h2 id="router-js文件-路由表中的mete设置-src-router-index-js"><a href="#router-js文件-路由表中的mete设置-src-router-index-js" class="headerlink" title="router.js文件 路由表中的mete设置(src/router/index.js)"></a>router.js文件 路由表中的mete设置(src/router/index.js)</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> asyncRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/list'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'DataSubscription'</span><span class="token punctuation">,</span>
    mete<span class="token operator">:</span><span class="token punctuation">&#123;</span>
        title<span class="token operator">:</span> <span class="token string">'列表'</span><span class="token punctuation">,</span> icon<span class="token operator">:</span> <span class="token string">'table'</span><span class="token punctuation">,</span>
        permission<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token comment">// 根据后端接口返回的内容进行修改，这里只是演示</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 这里注意，一定要在asyncRoutes最后面设置path: '*'，不然刷新页面会出现404的情况。</span>
  <span class="token comment">// 如果constantRoutes里面也设置了 path: '*'，需要将constantRoutes里面的删除</span>
  <span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">'/404'</span><span class="token punctuation">,</span> hidden<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>  </code></pre>

<h2 id="vuex中的permission-js-src-store-modules-permission-js"><a href="#vuex中的permission-js-src-store-modules-permission-js" class="headerlink" title="vuex中的permission.js(src/store/modules/permission.js)"></a>vuex中的permission.js(src/store/modules/permission.js)</h2><p>主要是三个方法 </p>
<ol>
<li><code>hasPermission</code>方法判断是否有权限</li>
<li><code>filterAsyncRoutes</code>方法，递归过滤不符合权限的路由</li>
<li><code>generateRoutes</code>方法来生成路由<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> asyncRoutes<span class="token punctuation">,</span> constantRoutes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/router'</span>

<span class="token keyword">function</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token parameter">permissions<span class="token punctuation">,</span> route</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>meta <span class="token operator">&amp;&amp;</span> route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>permission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里也可以根据业务用其他的条件进行筛选</span>
    <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">permission</span> <span class="token operator">=></span> route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>permission<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">filterAsyncRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> roles</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>route <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasPermission</span><span class="token punctuation">(</span>roles<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">filterAsyncRoutes</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>children<span class="token punctuation">,</span> roles<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">generateRoutes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> permissions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">let</span> accessedRoutes
		<span class="token keyword">if</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 要根据业务场景进行其他的判断</span>
			<span class="token comment">// 超级管理员获取全部菜单路由</span>
			accessedRoutes <span class="token operator">=</span> asyncRoutes <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 普通管理员</span>
			accessedRoutes <span class="token operator">=</span> <span class="token function">filterAsyncRoutes</span><span class="token punctuation">(</span>asyncRoutes<span class="token punctuation">,</span> permissions<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'SET_ROUTES'</span><span class="token punctuation">,</span> accessedRoutes<span class="token punctuation">)</span>
		<span class="token function">resolve</span><span class="token punctuation">(</span>accessedRoutes<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

</li>
</ol>
<h2 id="路由每次进入的时候进行判断-src-permission-js"><a href="#路由每次进入的时候进行判断-src-permission-js" class="headerlink" title="路由每次进入的时候进行判断(src/permission.js)"></a>路由每次进入的时候进行判断(src/permission.js)</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/login'</span><span class="token punctuation">]</span> <span class="token comment">// no redirect whitelist</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 根据是否有token,判断是否登录</span>
  <span class="token keyword">const</span> hasToken <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// if is logged in, redirect to the home page</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> hasGetUserInfo <span class="token operator">=</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>name
      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasGetUserInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 获取用户权限</span>
          <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> permissions <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/getInfo'</span><span class="token punctuation">)</span>

          <span class="token comment">// 根据权限进行动态生成路由</span>
          <span class="token keyword">const</span> accessRoutes <span class="token operator">=</span> <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'permission/generateRoutes'</span><span class="token punctuation">,</span> permissions<span class="token punctuation">)</span>
          <span class="token comment">// 生成最终路由</span>
          router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>accessRoutes<span class="token punctuation">)</span>

          <span class="token comment">// hack method to ensure that addRoutes is complete</span>
          <span class="token comment">// set the replace: true, so the navigation will not leave a history record</span>
          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>to<span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// remove token and go to login page to re-login</span>
          <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/resetToken'</span><span class="token punctuation">)</span>
          Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error <span class="token operator">||</span> <span class="token string">'Has Error'</span><span class="token punctuation">)</span>
          <span class="token function">next</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
          NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* has no token*/</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// in the free login whitelist, go directly</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// other pages that do not have permission to access are redirected to the login page.</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/login?redirect=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>to<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<h2 id="layout中的侧边栏展示可用路由-src-layout-components-Sidebar-index-vue"><a href="#layout中的侧边栏展示可用路由-src-layout-components-Sidebar-index-vue" class="headerlink" title="layout中的侧边栏展示可用路由(src/layout/components/Sidebar/index.vue)"></a>layout中的侧边栏展示可用路由(src/layout/components/Sidebar/index.vue)</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
	<span class="token operator">&lt;</span>el<span class="token operator">-</span>scrollbar wrap<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"scrollbar-wrapper"</span><span class="token operator">></span>
		<span class="token operator">&lt;</span>el<span class="token operator">-</span>menu
			<span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">-</span>active<span class="token operator">=</span><span class="token string">"activeMenu"</span>
			<span class="token operator">:</span>collapse<span class="token operator">=</span><span class="token string">"isCollapse"</span>
			<span class="token operator">:</span>background<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"variables.menuBg"</span>
			<span class="token operator">:</span>text<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"variables.menuText"</span>
			<span class="token operator">:</span>unique<span class="token operator">-</span>opened<span class="token operator">=</span><span class="token string">"false"</span>
			<span class="token operator">:</span>active<span class="token operator">-</span>text<span class="token operator">-</span>color<span class="token operator">=</span><span class="token string">"variables.menuActiveText"</span>
			<span class="token operator">:</span>collapse<span class="token operator">-</span>transition<span class="token operator">=</span><span class="token string">"false"</span>
			mode<span class="token operator">=</span><span class="token string">"vertical"</span>
		<span class="token operator">></span>
			<span class="token operator">&lt;</span>sidebar<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"route in permission"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"route.path"</span> <span class="token operator">:</span>item<span class="token operator">=</span><span class="token string">"route"</span> <span class="token operator">:</span>base<span class="token operator">-</span>path<span class="token operator">=</span><span class="token string">"route.path"</span> <span class="token operator">/</span><span class="token operator">></span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">></span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>scrollbar<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
		<span class="token comment">// 从store中获取</span>
		<span class="token string">'permission'</span>
	<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>



]]></content>
  </entry>
  <entry>
    <title>开发CLI</title>
    <url>/blog/2021/02/10/%E5%BC%80%E5%8F%91CLI/</url>
    <content><![CDATA[<h2 id="1-先来一个hello-world"><a href="#1-先来一个hello-world" class="headerlink" title="1. 先来一个hello world"></a>1. 先来一个<code>hello world</code></h2><p>在<code>package.json</code>中添加 </p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token string">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"hellocli"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>作用是申明命令叫做<code>hellocli</code>，入口文件是<code>index.js</code>。 </p>
<p>我们想用类似<code>vue create hello-world</code>这种全局命令，怎么办呢？ </p>
<p>使用<code>npm install . -g </code>或者<code>npm  link</code>来把命令注册为全局命令。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/976bc7f1f671460b9f67d7b863ee486b~tplv-k3u1fbpfcp-zoom-1.image" alt="1" loading="lazy"><br>在<code>index.js</code>中写入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello myCLI'</span><span class="token punctuation">)</span></code></pre>

<p>注意一定要写<code>#!/usr/bin/env node</code>不然不生效。现在我们测试下命令，在终端运行<code>hellocli</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e444c648a134e5eaa8922b5eb7794ca~tplv-k3u1fbpfcp-zoom-1.image" alt="2" loading="lazy"> </p>
<h2 id="2-使用命令行交互"><a href="#2-使用命令行交互" class="headerlink" title="2. 使用命令行交互"></a>2. 使用命令行交互</h2><p>2.1 首先安装<code>npm i commander -S</code></p>
<blockquote>
<p>commander: 完整的 node.js 命令行解决方案。更多可以参考<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md">文档</a></p>
</blockquote>
<p>在<code>index.js</code>中添加</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 捕获命令行输入的参数
 */</span>
program
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"create &lt;name>"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<blockquote>
<p>解释：</p>
<ol>
<li><p><code>command</code>是申明一个命令，即你可以使用<code>hellocli create</code>这种命令；</p>
</li>
<li><p><code>&lt;name&gt;</code>是用户输入的名称变量；</p>
</li>
<li><p><code>program.parse(process.argv)</code>是用来解析命令行输入的参数；</p>
</li>
<li><p><code>action</code>可以获取到<code>&lt;name&gt;</code>，这里把<code>&lt;name&gt;</code>输出</p>
</li>
</ol>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/479cd118043d449e98f3483499a4fe64~tplv-k3u1fbpfcp-zoom-1.image" alt="2" loading="lazy"><br>2.2 安装 <code>npm i inquirer -S</code> </p>
<blockquote>
<p>inquirer: 通用的命令行用户界面集合，用于和用户进行交互。更多参考<a href="https://github.com/SBoudrias/Inquirer.js">文档</a> </p>
</blockquote>
<p>在index.js里面添加</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inquirer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token string">'选择其中一个'</span><span class="token punctuation">,</span>
    choices<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">'苹果'</span><span class="token punctuation">,</span>
      <span class="token string">'香蕉'</span><span class="token punctuation">,</span>
      <span class="token string">'橘子'</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token string">'多选'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'multiple'</span><span class="token punctuation">,</span>
    choices<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">'跑步'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">'举哑铃'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span><span class="token string">"俯卧撑"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>
program
    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"create &lt;name>"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> listRes <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>listRes<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<blockquote>
<p>说明：</p>
<ol>
<li><code>type</code>可选值有input, number, confirm, list, rawlist, expand, checkbox, password, editor</li>
<li><code>name</code>这里定义的，会在结果中体现如下图 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bad9467b1ba41edbb9db68d73fb5e55~tplv-k3u1fbpfcp-zoom-1.image" alt="6" loading="lazy"></li>
<li><code>message</code> 是提示语</li>
<li><code>choices</code>是选项列表的数组</li>
<li>更多可以参考<a href="https://github.com/SBoudrias/Inquirer.js">文档</a>  </li>
</ol>
</blockquote>
<p>效果图如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b03a642e1e14207ad8b68709a5d81e0~tplv-k3u1fbpfcp-zoom-1.image" alt="4" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/393ad61ef3064b41bd2052b1d166f5b9~tplv-k3u1fbpfcp-zoom-1.image" alt="5" loading="lazy"><br>最终打印结果<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bad9467b1ba41edbb9db68d73fb5e55~tplv-k3u1fbpfcp-zoom-1.image" alt="6" loading="lazy"><br>至此，我们可以通过<code>commander</code>获取到用户输出的参数，可以通过<code>inquirer</code>获取到用户选择的选项。其他的可以根据<code>node</code>的一些语法对这些获取的参数进行处理。</p>
<p>可以参考下我写的<a href="https://www.npmjs.com/package/cmq_cli">CLI</a></p>
]]></content>
  </entry>
  <entry>
    <title>开发装机的一些必要工具</title>
    <url>/blog/2021/11/18/%E5%BC%80%E5%8F%91%E8%A3%85%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%85%E8%A6%81%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>每次换电脑就需要装一些软件工具等等，这里记录下安装的一些工具，便于以后快速换机</p>
</blockquote>
<p>下面全部是 <code>mac</code> 上的工具</p>
<h1 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h1><ul>
<li>浏览器：<a href="https://www.google.cn/chrome/">chrome</a></li>
<li>翻墙工具：<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">clash_for_windows_pkg</a></li>
<li><a href="https://www.jetbrains.com/webstorm/download/other.html">webstorm</a> </li>
<li><a href="https://www.postman.com/">postman</a></li>
<li><a href="https://code.visualstudio.com/">vscode</a></li>
</ul>
<h1 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h1><ul>
<li><p><a href="https://brew.sh/">brew</a></p>
<blockquote>
<p>安装</p>
<pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;&gt; install.sh)&quot;</code></pre></blockquote>
</li>
<li><p>node </p>
<blockquote>
<pre class="language-shell" data-language="shell"><code class="language-shell">brew install node</code></pre>
</blockquote>
</li>
<li><p>git </p>
<blockquote>
<pre class="language-shell" data-language="shell"><code class="language-shell">brew install git</code></pre>
</blockquote>
</li>
<li><p>wget</p>
<blockquote>
<pre class="language-shell" data-language="shell"><code class="language-shell">brew install wget</code></pre>
</blockquote>
</li>
<li><p>oh-my-zsh </p>
</li>
</ul>
<blockquote>
<p>参考别人<a href="https://zhuanlan.zhihu.com/p/58073103">安装教程</a>、<br><a href="https://hufangyun.com/2017/zsh-plugin/">插件推荐</a> </p>
<p>下面是我的插件列表 </p>
<p><code>plugins=(git zsh-syntax-highlighting autojump zsh-autosuggestions)</code> </p>
<p>有高亮、快速跳转、历史记录这些</p>
</blockquote>
<ul>
<li><p>nvm </p>
<blockquote>
<p>可参考我之前写的<a href="https://harry-qi.github.io/blog/2021/02/08/nvm/">教程</a></p>
</blockquote>
</li>
<li><p><a href="https://www.npmjs.com/package/nrm">nrm</a> </p>
<pre class="language-shell" data-language="shell"><code class="language-shell">npm i nrm -g </code></pre>

</li>
</ul>
<h1 id="沟通工具"><a href="#沟通工具" class="headerlink" title="沟通工具"></a>沟通工具</h1><ul>
<li><a href="https://page.dingtalk.com/wow/z/dingtalk/default/dddownload-index">钉钉</a></li>
<li><a href="https://weixin.qq.com/">微信</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>感悟</title>
    <url>/blog/2022/07/14/%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>刚玩把云顶之弈，在某一轮刷到了很多类似的牌，我心想大概可以玩这个羁绊了。可是玩着玩着，再也不来关于这个羁绊的牌了。<br>然后又刷到新的羁绊，我又心想多个羁绊也不错的，期间也赢了不少回合，心中还觉得自己选择的不错，可后来还是输了。  </p>
<p>由此想到人生，我们人生路上有太多的诱惑，太多的选择了。我们每次不经意的选择，或许在短期内，确实能有不错的反馈，但是最终结果或许不一定是令人满意的。  </p>
<p>我们做不了既要又要，我们必须做到取舍。但是取舍之间，还是充满着难度，因为我们不确定每一次取舍是否是正确的。  </p>
<p>谁能定义正确呢？唯独只有我们自己了。  </p>
<p>就像那句“人类的赞歌是勇气的赞歌”说的一样，我们去做个勇敢的人吧，勇敢地做出选择，勇敢地面对自己做出的选择。</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/blog/2022/01/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>最近打算看完<a href="https://book.douban.com/subject/26382780/">《JavaScript设计模式与开发实践》</a>，今天先从第一个设计模式开始看并总结出自己的理解。</p>
</blockquote>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>单例模式：<strong>保证一个类仅存有一个实例，并提供一个访问它的全局访问点</strong></p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ol>
<li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。 </li>
<li>那种需要对DOM进行创建销毁的场景也会提高性能。<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1>我觉得单例模式的核心就一句话，下面是伪代码<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    obj <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

</li>
</ol>
<h2 id="1-面对对象的实现方式"><a href="#1-面对对象的实现方式" class="headerlink" title="1. 面对对象的实现方式"></a>1. 面对对象的实现方式</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 要让最终返回的函数执行，返回实例，所以要加立即执行函数</span>
<span class="token class-name">Singleton</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// 使用闭包，将instance这个变量保存在内存中</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> instance
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>
<h2 id="2-JavaScript的实现"><a href="#2-JavaScript的实现" class="headerlink" title="2. JavaScript的实现"></a>2. JavaScript的实现</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">getSingle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> res <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>钉钉和宜搭的签名算法</title>
    <url>/blog/2021/11/03/%E9%92%89%E9%92%89%E5%92%8C%E5%AE%9C%E6%90%AD%E7%9A%84%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>由于钉钉和宜搭node版本的sdk相当难用，几乎没有文档，大部分是java示例，所以直接调用接口比较好。钉钉第三方企业应用调用接口都需要accessToken，而获取accessToken是需要签名算法的。宜搭也是需要签名算法的</p>
</blockquote>
<p>钉钉签名算法文档<a href="https://developers.dingtalk.com/document/app/signature-calculation-method-for-third-party-access-interfaces-1?spm=ding_open_doc.document.0.0.6072993f4V9rDI#topic-1949473">地址</a> </p>
<blockquote>
<p>把timestamp+”\n”+suiteTicket当做签名字符串，suiteSecret/customSecret做为签名密钥，使用HmacSHA256算法计算签名，然后进行Base64 encode获取最后结果。然后把签名参数再进行urlEncode，加到请求url后面。<br>宜搭签名算法文档<a href="https://www.yuque.com/yida/support/li2sf8">地址</a><br>宜搭签名算法其实本质跟钉钉的一样，只不过多了一步是将请求参数排列了下</p>
</blockquote>
<h2 id="钉钉签名算法"><a href="#钉钉签名算法" class="headerlink" title="钉钉签名算法"></a>钉钉签名算法</h2><blockquote>
<p>关于HmacSHA256算法，使用node自带的crypto模块<br>suiteTicket 是需要用钉钉推送数据库里面的suiteTicket，<a href="https://developers.dingtalk.com/document/app/obtain-the-access_token-of-the-authorized-enterprise">相关文档</a></p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Service <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> createHmac <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DingService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">get</span> <span class="token function">OpenSyncBizData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>model<span class="token punctuation">.</span>OpenSyncBizData<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 签名算法的相关参数</span>
  <span class="token keyword">async</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 读取数据库中biz_type为2的数据</span>
    <span class="token keyword">const</span> biz_type2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>OpenSyncBizData<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      order<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">'gmt_modified'</span><span class="token punctuation">,</span> <span class="token string">'DESC'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// asc升序 desc倒序 这是关键，需要取最新的</span>
      where<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        biz_type<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      raw<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parseBizData2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>biz_type2<span class="token punctuation">.</span>biz_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 时间戳 毫秒</span>
    <span class="token keyword">const</span> suiteTicket <span class="token operator">=</span> parseBizData2<span class="token punctuation">.</span>suiteTicket<span class="token punctuation">;</span>
    <span class="token keyword">const</span> suiteSecret <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// 第三方企业应用 xxx应用的SuiteSecret</span>
    <span class="token keyword">const</span> accessKey <span class="token operator">=</span> <span class="token string">'suitetvjnspt9jxlssyys'</span><span class="token punctuation">;</span> <span class="token comment">//第三方企业应用 xx应用的 SuiteKey</span>
    <span class="token keyword">const</span> auth_corpid <span class="token operator">=</span> <span class="token string">'ding152b8c2686eed6e635c2f4657eb6378f'</span><span class="token punctuation">;</span> <span class="token comment">// 自己企业的corp_id</span>

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      timestamp<span class="token punctuation">,</span>
      suiteTicket<span class="token punctuation">,</span>
      suiteSecret<span class="token punctuation">,</span>
      accessKey<span class="token punctuation">,</span>
      auth_corpid<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 签名算法获取签名</span>
  <span class="token comment">// 文档:https://developers.dingtalk.com/document/app/signature-calculation-method-for-third-party-access-interfaces-1?spm=ding_open_doc.document.0.0.5e9d993fLv97lG#topic-1949473</span>
  <span class="token keyword">async</span> <span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> suiteTicket<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> suiteSecret <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> bytes_to_sign <span class="token operator">=</span> timestamp <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> suiteTicket<span class="token punctuation">;</span> <span class="token comment">// 需加密的字符串</span>

    <span class="token keyword">const</span> digest <span class="token operator">=</span> <span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> suiteSecret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bytes_to_sign<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// accessToken</span>
  <span class="token keyword">async</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> accessKey<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> auth_corpid<span class="token punctuation">,</span> suiteTicket<span class="token punctuation">,</span> suiteSecret <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> signature <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> suiteTicket<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> suiteSecret <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/service/get_corp_token'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dingUrl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">?signature=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;timestamp=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timestamp<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;suiteTicket=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>suiteTicket<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;accessKey=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>accessKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;auth_corpid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>auth_corpid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">curl</span><span class="token punctuation">(</span>dingUrl<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      contentType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        auth_corpid<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// post请求url带access_token</span>
  <span class="token keyword">async</span> <span class="token function">httpPost</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> url<span class="token punctuation">,</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">curl</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      contentType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
      data<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 获取用户信息</span>
  <span class="token keyword">async</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> userid <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/topapi/v2/user/get'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">httpPost</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span>
        url<span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          userid<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> DingService<span class="token punctuation">;</span>
</code></pre>

<h2 id="宜搭的签名算法"><a href="#宜搭的签名算法" class="headerlink" title="宜搭的签名算法"></a>宜搭的签名算法</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Service <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'egg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">const</span> dayjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dayjs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Buffer <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'buffer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> createHmac <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 签名算法</span>
<span class="token keyword">function</span> <span class="token function">get_signature</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> url<span class="token punctuation">,</span> url_params<span class="token punctuation">,</span> <span class="token constant">API_SECRET_KEY</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> bytes_to_sign <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timestamp<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nonce<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url_params<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hmac <span class="token operator">=</span> <span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token constant">API_SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hmac<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bytes_to_sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> digest <span class="token operator">=</span> hmac<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 参数排序</span>
<span class="token keyword">function</span> <span class="token function">orderParams</span><span class="token punctuation">(</span><span class="token parameter">paramsObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> orderKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>paramsObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  orderKey<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> paramsObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>
    str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">YiDaService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 调用接口，根据appType获取密钥等信息</span>
  <span class="token keyword">async</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter">appType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> APIUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token constant">API</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> APIUrl <span class="token operator">+</span> <span class="token string">'/api/center/yida/info/details'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        appType<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> r<span class="token punctuation">.</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 获取宜搭签名</span>
  <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> url_info<span class="token punctuation">,</span> url_params <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
      <span class="token constant">API_SECRET_KEY</span><span class="token punctuation">,</span>
      <span class="token constant">API_KEY</span><span class="token punctuation">,</span>
      getIPAddress<span class="token punctuation">,</span>
      macAddress<span class="token punctuation">,</span>
      <span class="token constant">API_VERSION</span><span class="token punctuation">,</span>
      nonce<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>helper<span class="token punctuation">;</span>
    <span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dayjsNow <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dayjsNow<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">T</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dayjsNow<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm:ss.SSS'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">+08:00</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> signature <span class="token operator">=</span> <span class="token function">get_signature</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> url_info<span class="token punctuation">,</span> url_params<span class="token punctuation">,</span> <span class="token constant">API_SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      apiKey<span class="token operator">:</span> <span class="token constant">API_KEY</span><span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-Signature'</span><span class="token operator">:</span> signature<span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-Timestamp'</span><span class="token operator">:</span> timestamp<span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-Nonce'</span><span class="token operator">:</span> nonce<span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-Version'</span><span class="token operator">:</span> <span class="token constant">API_VERSION</span><span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-IP'</span><span class="token operator">:</span> <span class="token function">getIPAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">'X-Hmac-Auth-MAC'</span><span class="token operator">:</span> <span class="token function">macAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 宜搭接口</span>
  <span class="token keyword">async</span> <span class="token function">baseServe</span><span class="token punctuation">(</span><span class="token parameter">bodyParams<span class="token punctuation">,</span> yidaUrl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> appType<span class="token punctuation">,</span> systemToken<span class="token punctuation">,</span> managerDingUserId<span class="token operator">:</span> userId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span>bodyParams<span class="token punctuation">.</span>appType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> pre_url <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>helper<span class="token punctuation">;</span>
    <span class="token keyword">const</span> serverUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pre_url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>yidaUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      appType<span class="token punctuation">,</span>
      systemToken<span class="token punctuation">,</span>
      userId<span class="token punctuation">,</span>
      <span class="token operator">...</span>bodyParams<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyParams<span class="token punctuation">.</span>updateFormDataJson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      paramsObj<span class="token punctuation">.</span>updateFormDataJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>bodyParams<span class="token punctuation">.</span>updateFormDataJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyParams<span class="token punctuation">.</span>searchFieldJson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      paramsObj<span class="token punctuation">.</span>searchFieldJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>bodyParams<span class="token punctuation">.</span>searchFieldJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> url_params <span class="token operator">=</span> <span class="token function">orderParams</span><span class="token punctuation">(</span>paramsObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> url_info<span class="token operator">:</span> yidaUrl<span class="token punctuation">,</span> url_params <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>serverUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      headers<span class="token punctuation">,</span>
      data<span class="token operator">:</span> paramsObj<span class="token punctuation">,</span>
      dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">baseServe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">'/yida_vpc/form/searchFormDatas.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 更新表单</span>
  <span class="token keyword">async</span> <span class="token function">updateForm</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">baseServe</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">'/yida_vpc/form/updateFormData.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> YiDaService<span class="token punctuation">;</span>
</code></pre>

<p><strong>2022-02-10 更新</strong><br>经过测试，标注部分计算结果是一致的<br><img src="https://s2.loli.net/2022/02/10/N96bnhOzrZdCgQq.jpg" alt="22" loading="lazy"><br>即 <code>.digest(&#39;base64&#39;)</code>与<code>Buffer.from(digest).toString(&#39;base64&#39;)</code>效果一致</p>
]]></content>
  </entry>
  <entry>
    <title>防抖节流</title>
    <url>/blog/2021/11/07/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<blockquote>
<p>看过很多关于防抖节流的文章，总是记不住原理，最近看视频，发现视频中提供的思路很容易理解</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 防抖</span>
<span class="token comment">// 思路：fn必须由定时器调用，用户触发就重置定时器</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 用户调用就重置定时器</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// fn只能由定时器调用</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 节流</span>
<span class="token comment">// 思路：如果当前时间和上次调用时间超过delay就执行fn</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 上次调用时间</span>
    <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 当前时间</span>
        <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 两次调用时间超过delay就执行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>noe <span class="token operator">-</span> last <span class="token operator">></span> delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            last <span class="token operator">=</span> now 
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>上述对于理解怎么简单实现防抖节流比较方便，较为详细的实现方式可以参考冴羽大佬的<a href="https://github.com/mqyqingfeng/Blog/issues/22">防抖</a>以及<a href="https://github.com/mqyqingfeng/Blog/issues/26">节流</a></p>
]]></content>
  </entry>
  <entry>
    <title>项目中使用异步遇到的问题</title>
    <url>/blog/2021/09/29/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="场景1：有时候一个列表接口中的一个字段需要请求另外个接口"><a href="#场景1：有时候一个列表接口中的一个字段需要请求另外个接口" class="headerlink" title="场景1：有时候一个列表接口中的一个字段需要请求另外个接口"></a>场景1：有时候一个列表接口中的一个字段需要请求另外个接口</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模拟接口</span>
<span class="token keyword">let</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resovle</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          title<span class="token operator">:</span> <span class="token string">"摩西摩西"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
      <span class="token function">resovle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resovle</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          name<span class="token operator">:</span> <span class="token string">"东方仗助"</span><span class="token punctuation">,</span>
          address<span class="token operator">:</span> <span class="token string">'杜王町'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          name<span class="token operator">:</span> <span class="token string">"空条承太郎"</span><span class="token punctuation">,</span>
          address<span class="token operator">:</span> <span class="token string">'日本'</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token function">resovle</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> tem <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>item
    <span class="token punctuation">&#125;</span> 
    <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      tem<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> res
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> tem
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span></code></pre>
<h2 id="场景2-循环中要按照顺序异步执行-或者说需要等所有异步结束后再执行其他操作"><a href="#场景2-循环中要按照顺序异步执行-或者说需要等所有异步结束后再执行其他操作" class="headerlink" title="场景2 循环中要按照顺序异步执行,或者说需要等所有异步结束后再执行其他操作"></a>场景2 循环中要按照顺序异步执行,或者说需要等所有异步结束后再执行其他操作</h2><blockquote>
<p>例如，需要循环列表数据，对列表数据进行其他的异步操作，等所有操作结束再返回结果</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模拟接口</span>
<span class="token keyword">const</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resovle</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          title<span class="token operator">:</span> <span class="token string">"雷猴"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          userId<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          title<span class="token operator">:</span> <span class="token string">"你好啊"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
      <span class="token function">resovle</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resovle</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token comment">// 伪代码</span>
      <span class="token comment">// 调用第三方API发送信息</span>
      <span class="token function">resovle</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        msg<span class="token operator">:</span><span class="token string">"成功"</span><span class="token punctuation">,</span>
        userId
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> dataArr <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 创建一个promise队列，再利用Promise.all()</span>
  <span class="token keyword">let</span> promiseQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  dataArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
     <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    promiseQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> queueRes <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseQueue<span class="token punctuation">)</span>
  <span class="token comment">// 拿到所有数据，执行其他操作</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queueRes<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">getAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h2 id="场景3-每隔一段时间执行异步操作"><a href="#场景3-每隔一段时间执行异步操作" class="headerlink" title="场景3 每隔一段时间执行异步操作"></a>场景3 每隔一段时间执行异步操作</h2><blockquote>
<p>有时候，需要间隔一段时间调用第三方接口(因为如果短时间内同时请求，第三方接口会做限制)</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模拟数据库数据</span>
<span class="token keyword">const</span> dbData <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"艾伦"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"三笠"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>
<span class="token comment">// 模拟接口</span>
<span class="token keyword">const</span> <span class="token constant">API</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>dbData<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">updataData</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> targetIndex <span class="token operator">=</span> dbData<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span> <span class="token parameter">item</span><span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        id<span class="token punctuation">,</span>
        name
      <span class="token punctuation">&#125;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">id为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">，已修改为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      dbData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>targetIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 延迟执行fn，并promise化</span>
<span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">updataFn</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token function">updataData</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 将传过来的数据进行批量修改</span>
<span class="token keyword">function</span> <span class="token function">updateAllData</span><span class="token punctuation">(</span><span class="token parameter">updataIdArr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> promiseQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  updataIdArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> item
    <span class="token comment">// 注意需要将时间*index</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span>index<span class="token punctuation">,</span> updataFn<span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    promiseQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"已全部修改！"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> updataIdArr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"兵长"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"团长"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>
<span class="token function">updateAllData</span><span class="token punctuation">(</span>updataIdArr<span class="token punctuation">)</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>项目中用到的递归</title>
    <url>/blog/2021/04/09/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<blockquote>
<p>在写组织相关的业务中，会经常写一些递归来实现业务，本文记录下项目中用到的递归</p>
</blockquote>
<p>后端给到的组织树的结构如下</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span><span class="token string">'组织1'</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span><span class="token string">'组织1-1'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span><span class="token string">'组织1-2'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 找上级id集合
 * tem是递归使用
 */</span>
<span class="token function">findUpId</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> targetId<span class="token punctuation">,</span> tem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tem <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    tem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> tmpArr <span class="token operator">=</span> tem<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    tmpArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetId <span class="token operator">===</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> tmpArr
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> findResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findUpId</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span> targetId<span class="token punctuation">,</span> tmpArr<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>findResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> findResult
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 寻找下级</span>
<span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> item<span class="token punctuation">.</span>children
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findChildren</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
        <span class="token comment">// 注意：这里判断，有值就return，没有值就会继续走循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> val
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 判断是否有下级</span>
<span class="token function">hasChildren</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      res <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasChildren</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 寻找符合要求的id,禁用自身以及下级</span>
<span class="token function">cascaderDisable</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DisableSub</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span>
      data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 递归children</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cascaderDisable</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 二维数组转树形结构</span>
<span class="token comment">// 通过pid找关系</span>
<span class="token keyword">function</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存放结果集</span>
  <span class="token keyword">const</span> itemMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> pid <span class="token punctuation">&#125;</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>item<span class="token punctuation">,</span>
      children<span class="token operator">:</span> itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> treeItem <span class="token operator">=</span> itemMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      itemMap<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
  </entry>
</search>
